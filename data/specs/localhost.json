{
  "openapi": "3.0.1",
  "info": {
    "title": "Zentrio Management System KSHRD",
    "description": "API documentation for the managing tasks application",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/api/v1/workspaces/{workspace-id}": {
      "get": {
        "tags": [
          "Workspace Controller"
        ],
        "summary": "Get workspace by ID",
        "description": "Get workspace by ID with current users",
        "operationId": "getWorkspaceById",
        "parameters": [
          {
            "name": "workspace-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workspace Controller"
        ],
        "summary": "Update workspace by ID",
        "description": "Updated workspace by ID with current users",
        "operationId": "updateWorkspaceById",
        "parameters": [
          {
            "name": "workspace-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workspace Controller"
        ],
        "summary": "Delete workspace by ID",
        "description": "Deleted workspace by ID with current users",
        "operationId": "deleteWorkspaceByWorkspaceId",
        "parameters": [
          {
            "name": "workspace-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteApiResponseWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/{task-id}": {
      "get": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Get task by task ID",
        "description": "Get task by ID with current boards",
        "operationId": "getTaskById",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Update task by ID with board ID AND gantt bar ID",
        "description": "Updated task by ID with boards ID and gantt bars ID",
        "operationId": "updateTaskByIdWithBoardIdAndGanttBarId",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/{task-id}/status": {
      "put": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Update status of task by ID",
        "description": "Update status of task by specific tasks ID",
        "operationId": "updateStatusOfTaskById",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "OVERDUE",
                "COMPLETED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/{task-id}/stage/in-progress": {
      "put": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Update stage to progress by task ID after assigned Leaders",
        "description": "Updated stage to IN_PROGRESS after assigned leaders",
        "operationId": "updateProgressOfTaskById",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/{task-id}/move": {
      "put": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Move task with task ID",
        "description": "Moved task to another stage with specific tasks ID",
        "operationId": "moveTask",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "stage",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "UNDER_REVIEW",
                "COMPLETED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/profiles/update-profile": {
      "put": {
        "tags": [
          "Profile Controller"
        ],
        "summary": "Update user profile",
        "description": "Updates the details of the currently authenticated user. Provide the necessary fields in the request body.",
        "operationId": "updateProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAppUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-charts/{gantt-chart-id}": {
      "put": {
        "tags": [
          "Gantt Chart Controller"
        ],
        "summary": "Update gantt chart by ID",
        "description": "Updated gantt chart by ID with current boards",
        "operationId": "updateGanttChartByGanttChartId",
        "parameters": [
          {
            "name": "gantt-chart-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GanttChartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGanttChart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-bars/{gantt-bar-id}/ganttCharts/": {
      "put": {
        "tags": [
          "Gantt Bars Controller"
        ],
        "summary": "Update gantt bar by ID AND gantt chart ID",
        "description": "Updated gantt bars by ID with current gantt charts",
        "operationId": "updateGanttBarByGanttBarId",
        "parameters": [
          {
            "name": "gantt-bar-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GanttBarRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGanttBar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/feedback/{feedback-id}": {
      "put": {
        "tags": [
          "Feedback Controller"
        ],
        "summary": "Update feedback by feedback-id ",
        "operationId": "UpdateFeedbackById",
        "parameters": [
          {
            "name": "feedback-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFeedback"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/{document-id}": {
      "get": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Get document by document id",
        "operationId": "getDocumentById",
        "parameters": [
          {
            "name": "document-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Update document name document id",
        "operationId": "updateDocumentName",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Delete document by document-id",
        "operationId": "deleteDocumentById",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseVoid"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/{document-id}/private": {
      "put": {
        "tags": [
          "Documentation Controller"
        ],
        "operationId": "makeDocumentPrivate",
        "parameters": [
          {
            "name": "document-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseString"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/public-document/{document-id}": {
      "put": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Public document by document id",
        "operationId": "publicDocument",
        "parameters": [
          {
            "name": "document-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseString"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/comment/{comment-id}": {
      "get": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "Get comment by comment id",
        "operationId": "getCommentByCommentId",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "Update  comment by comment id",
        "operationId": "UpdateCommentByCommentId",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "Delete  comment by comment id",
        "operationId": "deleteCommentByCommentId",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseVoid"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/{checklist-id}": {
      "get": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Get checklist by ID",
        "description": "Get checklist by ID with current tasks",
        "operationId": "getChecklistById",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseChecklist"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Update checklist by ID and task ID ",
        "description": "Updated checklist by ID with specific tasks ID",
        "operationId": "updateChecklistByIdAndTaskId",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseChecklist"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/{checklist-id}/status": {
      "put": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Update status of checklist by ID",
        "description": "Update status of checklist by specific checklist ID",
        "operationId": "updateStatusOfChecklistById",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "DONE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/calendars/{calendar-id}": {
      "get": {
        "tags": [
          "Calendar Controller"
        ],
        "summary": "Get note in calendar",
        "description": "Get note from calendar with tasks for current user",
        "operationId": "getCalendarById",
        "parameters": [
          {
            "name": "calendar-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseCalendar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Calendar Controller"
        ],
        "summary": "Update note by id from calendar",
        "description": "Update note by note id  from calendar ",
        "operationId": "UpdateCalendarByNoteId",
        "parameters": [
          {
            "name": "calendar-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseCalendar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Get board by ID ",
        "description": "Get a board by board ID",
        "operationId": "getBoardByBoardId",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseBoard"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Update board by board ID And Workspace ID",
        "description": "Update board by board ID And specific workspace ID",
        "operationId": "updateBoardByBoardId",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseBoard"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}/favourite": {
      "put": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Updated favourite of board by ID",
        "description": "Updated favourite of board by specific board ID",
        "operationId": "updateBoardFavourite",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isFavourite",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/attachments/{attachment-id}/checklists/{checklist-id}": {
      "put": {
        "tags": [
          "Attachment Controller"
        ],
        "summary": "Update attachment",
        "description": "Updated attachment by attachment id",
        "operationId": "updateAttachment",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attachment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAttachment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Attachment Controller"
        ],
        "summary": "Delete attachment",
        "description": "Deleted attachment by attachment id",
        "operationId": "deleteAttachmentById",
        "parameters": [
          {
            "name": "attachment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/achievements": {
      "get": {
        "tags": [
          "Achievement Controller"
        ],
        "summary": "Get all achievement ",
        "description": "Get all achievement",
        "operationId": "getAllAchievements",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAchievement"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Achievement Controller"
        ],
        "summary": "Update achievement",
        "description": "Updated achievement for a user",
        "operationId": "updateAchievement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AchievementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAchievement"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Achievement Controller"
        ],
        "summary": "Set up achievement",
        "description": "set up achievement for a user",
        "operationId": "createAchievement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AchievementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAchievement"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/workspaces": {
      "get": {
        "tags": [
          "Workspace Controller"
        ],
        "summary": "Get all workspaces",
        "description": "Get all workspace for current users",
        "operationId": "getAllWorkspaces",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workspace Controller"
        ],
        "summary": "Create workspace",
        "description": "Created workspace by current users",
        "operationId": "createWorkspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks": {
      "get": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Get all task for all user",
        "description": "Get all the tasks for all users",
        "operationId": "getAllTasks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Create task by boards ID, and gantt bars ID",
        "description": "Created task with boards ID and gantt bars ID",
        "operationId": "createTaskByBoardIdAndGanttBarId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/{task-id}/members/{assignee-id}": {
      "post": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Assigned role with task ID",
        "description": "Assigned role leader tasks with specific users",
        "operationId": "assignLeaderToTask",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "assignee-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/sendMessageToUser/{sender-id}/users/{receiver-id}/tasks/{task-id}": {
      "post": {
        "tags": [
          "Notification Controller"
        ],
        "operationId": "sendMessageToUser",
        "parameters": [
          {
            "name": "sender-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiver-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/sendMessageToAllUsers": {
      "post": {
        "tags": [
          "Notification Controller"
        ],
        "operationId": "sendMessageToAllUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-charts": {
      "post": {
        "tags": [
          "Gantt Chart Controller"
        ],
        "summary": "Create gantt chart by board ID",
        "description": "Created gantt chart by specific boards ID",
        "operationId": "createGanttChartByBoardId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GanttChartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGanttChart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-bars/gantt-charts": {
      "post": {
        "tags": [
          "Gantt Bars Controller"
        ],
        "summary": "Create gantt bars with gantt chart ID",
        "description": "Created gantt bars with specific gantt charts ID",
        "operationId": "createGanttBarByGanttChartId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GanttBarRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGanttBar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/files/upload-file": {
      "post": {
        "tags": [
          "Images Controller"
        ],
        "summary": "Upload a file",
        "description": "Uploads a file and returns metadata about the uploaded file.",
        "operationId": "uploadFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFileMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/tasks": {
      "post": {
        "tags": [
          "Feedback Controller"
        ],
        "summary": "creat feedback ",
        "operationId": "createFeedback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFeedback"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents": {
      "post": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Create document",
        "operationId": "createDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/share-document": {
      "post": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Share Document with Specific   User",
        "operationId": "shareFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseString"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/boards/{board-id}/": {
      "post": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Create document by upload",
        "operationId": "uploadDocument",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "multipartFile"
                ],
                "type": "object",
                "properties": {
                  "multipartFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/comment/checklist/": {
      "post": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "Create comment by checklist id",
        "operationId": "createComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists": {
      "post": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Create checklist by tasks ID",
        "description": "Created checklist with specific tasks ID",
        "operationId": "createChecklist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseChecklist"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/{checklistId}/cover": {
      "post": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Upload cover of checklist by checklist ID",
        "description": "Upload cover of checklist specific checklist ID",
        "operationId": "uploadCover",
        "parameters": [
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFileMetadata"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/{checklist-id}/tasks/{task-id}/members{assigned-by}/members/{assigned-to}/": {
      "post": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Assigned member to checklist",
        "description": "Assigned member to checklist with specific members ID",
        "operationId": "assignMemberToChecklist",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "assigned-by",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "assigned-to",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/calendars/tasks": {
      "post": {
        "tags": [
          "Calendar Controller"
        ],
        "summary": "Create note in calendar",
        "description": "Create calendar with tasks for current user",
        "operationId": "CreateNoteInCalendar",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseCalendar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Get all boards",
        "operationId": "getAllBoards",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetBoard"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Created new board by workspace ID",
        "description": "create a new board by specific workspace ID",
        "operationId": "createBoard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseBoard"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}/users/invite": {
      "post": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Invite users to board",
        "description": "Invite any users to specific board",
        "operationId": "inviteMemberToBoard",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InviteRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}/cover/": {
      "post": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Upload cover by board ID",
        "description": "Upload board cover by specific board ID",
        "operationId": "uploadCoverByBoardId",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFileMetadata"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/assign": {
      "post": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Assigned users role to board",
        "description": "Assigned user role to the specific boards",
        "operationId": "assignRoleToBoard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignedRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auths/verify": {
      "post": {
        "tags": [
          "Auth Controller"
        ],
        "summary": "Verify otp for user",
        "description": "Verify user with email and OTP",
        "operationId": "verify",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "otp",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "VERIFY",
                "RESET"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auths/reset-password": {
      "post": {
        "tags": [
          "Auth Controller"
        ],
        "summary": "Reset password",
        "description": "Reset password for user that are forgot the password",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseResetPasswordRequest"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auths/resend": {
      "post": {
        "tags": [
          "Auth Controller"
        ],
        "summary": "Resend OTP user",
        "description": "Resend OTP for user verification",
        "operationId": "resend",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "VERIFY",
                "RESET"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auths/register": {
      "post": {
        "tags": [
          "Auth Controller"
        ],
        "summary": "Register a user",
        "description": "Register user with credential",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAppUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auths/register/third-party": {
      "post": {
        "tags": [
          "Auth Controller"
        ],
        "summary": "Register with third party",
        "description": "Register new user with third party provide for information",
        "operationId": "registerThirdParty",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThirdPartyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAppUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auths/login": {
      "post": {
        "tags": [
          "Auth Controller"
        ],
        "summary": "Login a user",
        "description": "Login user with email verified",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auths/login/third-party": {
      "post": {
        "tags": [
          "Auth Controller"
        ],
        "summary": "Login with third party",
        "description": "Login user with third party with credential from third party are provided",
        "operationId": "loginThirdParty",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthThirdPartyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/attachments": {
      "post": {
        "tags": [
          "Attachment Controller"
        ],
        "summary": "Create attachment",
        "description": "Created attachment by checklist id",
        "operationId": "createAttachment",
        "parameters": [
          {
            "name": "checklistId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAttachment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/files/upload-user": {
      "post": {
        "tags": [
          "Drive Upload Controller"
        ],
        "summary": "Upload all file to drive road",
        "operationId": "uploadWithUserToken",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseRes"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/files/upload-image-to-drive": {
      "post": {
        "tags": [
          "Drive Upload Controller"
        ],
        "summary": "Upload image to folder",
        "operationId": "uploadImageToFolderDrive",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseRes"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/files/create/{file-type}": {
      "post": {
        "tags": [
          "Drive Upload Controller"
        ],
        "summary": "Create drive file",
        "operationId": "createDriveFile",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file-type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DOC",
                "SHEET",
                "SLIDE",
                "FOLDER"
              ]
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/files/rename": {
      "patch": {
        "tags": [
          "Drive Upload Controller"
        ],
        "summary": "Rename file ",
        "operationId": "renameFile",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/workspaces/users": {
      "get": {
        "tags": [
          "Workspace Controller"
        ],
        "summary": "Get all workspaces for users",
        "description": "Get all workspace for display to users",
        "operationId": "getAllWorkspacesForAllUsers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/workspaces/users/{workspace-id}": {
      "get": {
        "tags": [
          "Workspace Controller"
        ],
        "summary": "Get workspace by workspace ID for users",
        "description": "Get workspace by ID to display for users",
        "operationId": "getWorkspaceByIdForAllUsers",
        "parameters": [
          {
            "name": "workspace-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/workspaces/title/{title}": {
      "get": {
        "tags": [
          "Workspace Controller"
        ],
        "summary": "Get workspace by title",
        "description": "Get workspace by titles",
        "operationId": "getWorkspaceByTitle",
        "parameters": [
          {
            "name": "title",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/{task-id}/users": {
      "get": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Get task by ID with current user",
        "description": "Get task by ID with current user ID",
        "operationId": "getTaskByIdAndUserId",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/title/{title}/boards/{board-id}": {
      "get": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Get task by title with board ID",
        "description": "Get task by title with specific boards ID",
        "operationId": "getTaskByTitleWithBoardId",
        "parameters": [
          {
            "name": "title",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/current": {
      "get": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Get all task for current users",
        "description": "Get all task for current user ID",
        "operationId": "getAllTasksForCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/boards/{board-id}/gantt-bars/{gantt-bar-id}": {
      "get": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Get all task by board ID, and gantt bar ID",
        "description": "Get all task by specific board ID with gantt bar ID",
        "operationId": "getTasksByBoardIdAndGanttBarId",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gantt-bar-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/reports/pdf/boards/{board-id}": {
      "get": {
        "tags": [
          "Report Controller"
        ],
        "summary": "Generate report as pdf file by board id",
        "operationId": "generateProjectReport",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/reports/boards/{board-id}": {
      "get": {
        "tags": [
          "Report Controller"
        ],
        "summary": "Get report by board id",
        "operationId": "getReportByBoardId",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseReport"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/profiles/preview-profile": {
      "get": {
        "tags": [
          "Profile Controller"
        ],
        "summary": "Get user profile",
        "description": "Fetches the details of the currently authenticated user.",
        "operationId": "getProfile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAppUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/users/{userId}": {
      "get": {
        "tags": [
          "Notification Controller"
        ],
        "operationId": "getNotificationByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-charts/{gant-chart-id}/boards/{board-id}": {
      "get": {
        "tags": [
          "Gantt Chart Controller"
        ],
        "summary": "Get gantt chart by ID",
        "description": "Get gantt chart by ID with current boards",
        "operationId": "getGanttChartById",
        "parameters": [
          {
            "name": "gant-chart-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGanttChart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-charts/current": {
      "get": {
        "tags": [
          "Gantt Chart Controller"
        ],
        "summary": "Get gantt chart with current users",
        "description": "Get gantt chart by ID with current users",
        "operationId": "getGanttChartByCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGanttChart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-charts/boards/{board-id}": {
      "get": {
        "tags": [
          "Gantt Chart Controller"
        ],
        "summary": "Get all gantt chart by board ID",
        "description": "Get all gantt chart by specific boards ID",
        "operationId": "getAllGanttChartByBoardId",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGanttChart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-bars": {
      "get": {
        "tags": [
          "Gantt Bars Controller"
        ],
        "summary": "Get all gantt bar",
        "description": "Get all gantt bars for all users",
        "operationId": "getAllGanttBars",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetGanttBar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-bars/{gantt-bar-id}/ganttCharts/{gantt-chart-id}": {
      "get": {
        "tags": [
          "Gantt Bars Controller"
        ],
        "summary": "Get gantt bar by ID AND gantt chart ID",
        "description": "Get gantt bar with ID with current gantt chart ID",
        "operationId": "getGanttBarById",
        "parameters": [
          {
            "name": "gantt-bar-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gantt-chart-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGanttBar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Gantt Bars Controller"
        ],
        "summary": "Delete gantt bar",
        "description": "Deleted gantt bar by ID with current gantt charts",
        "operationId": "deleteGanttBarByGanttBarId",
        "parameters": [
          {
            "name": "gantt-bar-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gantt-chart-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-bars/gantt-charts/{gantt-chart-id}": {
      "get": {
        "tags": [
          "Gantt Bars Controller"
        ],
        "summary": "Get all gantt bars by gantt charts ID",
        "description": "Get all gantt bars by gantt charts ID",
        "operationId": "getAllGanttBarsByGanttChartId",
        "parameters": [
          {
            "name": "gantt-chart-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetGanttBar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-bars/current": {
      "get": {
        "tags": [
          "Gantt Bars Controller"
        ],
        "summary": "Get all gantt bar for current user",
        "description": "Get all gantt bar for current users",
        "operationId": "getAllGanttBarsForCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetGanttBar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/files/preview-file/{file-name}": {
      "get": {
        "tags": [
          "Images Controller"
        ],
        "summary": "Preview a file",
        "description": "Fetches a file by its name and returns the file as a byte array (usually for image previews).",
        "operationId": "getFileByFileName",
        "parameters": [
          {
            "name": "file-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback-id}/tasks/{task-id}": {
      "get": {
        "tags": [
          "Feedback Controller"
        ],
        "summary": "Get feedback feedback by Id ",
        "operationId": "getFeedbackById",
        "parameters": [
          {
            "name": "feedback-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFeedback"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Feedback Controller"
        ],
        "summary": "Delete   feedback by feedback-id ",
        "operationId": "deleteFeedbackById",
        "parameters": [
          {
            "name": "feedback-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseVoid"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/feedback/tasks/{task-id}": {
      "get": {
        "tags": [
          "Feedback Controller"
        ],
        "summary": "Geat all  feedback by taskId ",
        "operationId": "getAllFeedback",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSetFeedback"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/public-documents/boards/{board-id}": {
      "get": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Get all public documents",
        "operationId": "getAllPublicDocument",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseListDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/boards/{board-id}": {
      "get": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Get all documents  by board id",
        "operationId": "getAllDocuments",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseListDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/boards/{board-id}/file-type/{mimeType}": {
      "get": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Get Document By Document Type",
        "operationId": "getDocumentByType",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mimeType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DOC",
                "SHEET",
                "SLIDE",
                "FOLDER"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseListDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/documents/boards/{board-id}/document/{document-name}": {
      "get": {
        "tags": [
          "Documentation Controller"
        ],
        "summary": "Get Document By Name",
        "operationId": "getDocumentByName",
        "parameters": [
          {
            "name": "document-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseListDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/comment/checklists/{checklist-id}": {
      "get": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "Get all comments by checklist id",
        "operationId": "getAllComments",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSetComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/{checklist-id}/cover/{file-name}": {
      "get": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Get cover of checklist by checklist ID and File Name",
        "operationId": "checklistCoverByFileName",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "file-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/tasks/{task-id}": {
      "get": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Get all checklist by tasks ID",
        "description": "Get all checklist by specific tasks ID",
        "operationId": "getAllChecklistsByTaskId",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetChecklist"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/members": {
      "get": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Get all checklists",
        "description": "Get all checklist",
        "operationId": "getAllChecklists",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetChecklist"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/current": {
      "get": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Get all checklist by current users",
        "description": "Get all checklists by current users",
        "operationId": "getAllChecklistsByCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetChecklist"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/calendars/tasks/{task-id}": {
      "get": {
        "tags": [
          "Calendar Controller"
        ],
        "summary": "Get all note from calendar by current user",
        "description": "Get all note from calendar ",
        "operationId": "getAllCalendarByTaskId",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetCalendar"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/calendars/boards/{board_id}": {
      "get": {
        "tags": [
          "Calendar Controller"
        ],
        "summary": "Get calendar by board id and user id",
        "description": "Get calendar with tasks for current user",
        "operationId": "getCalendarForCurrentUser",
        "parameters": [
          {
            "name": "board_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}/users": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Get board by ID with current user ID",
        "description": "Get board by ID with current user ID",
        "operationId": "getBoardByIdWithCurrentUserId",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseBoard"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}/members": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Get board with members",
        "description": "Get board with member information",
        "operationId": "getBoardWithMembers",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetMemberResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}/invitations/accept": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Accept board invitation",
        "description": "Accept invitation to join a board using email",
        "operationId": "acceptInvitation",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleRequest",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ROLE_LEADER",
                "ROLE_MEMBER"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}/cover/{file-name}": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Get cover board by board ID",
        "description": "Get cover of boards by specific board ID",
        "operationId": "getCoverByBoardIdAndFileName",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "file-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/workspaces/{workspace-id}": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Get all boards by workspace ID",
        "description": "Get all boards by specific workspace ID",
        "operationId": "getAllBoardsByWorkspaceId",
        "parameters": [
          {
            "name": "workspace-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetBoard"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/title/{board-title}": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Get board by title ",
        "description": "Get a board by board title",
        "operationId": "getBoardByBoardTitle",
        "parameters": [
          {
            "name": "board-title",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetBoard"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/current": {
      "get": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Get all board for current user",
        "operationId": "getAllBoardsForCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseHashSetBoard"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/attachments/checklists/{checklist-id}": {
      "get": {
        "tags": [
          "Attachment Controller"
        ],
        "summary": "Get attachment by checklist ",
        "description": "Get attachment by checklist id",
        "operationId": "getAttachmentByChecklistId",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAttachment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/achievements/current": {
      "get": {
        "tags": [
          "Achievement Controller"
        ],
        "summary": "Get achievement",
        "description": "Get achievement for a user",
        "operationId": "getAllAchievementsByCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseAchievement"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/files/getFileBy-typ": {
      "get": {
        "tags": [
          "Drive Upload Controller"
        ],
        "summary": "Get all files by file type",
        "operationId": "getFilesByMimeTypeInFolder",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseListFile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/files/getFileBy-FolderID": {
      "get": {
        "tags": [
          "Drive Upload Controller"
        ],
        "summary": "Get all files by folder id",
        "operationId": "getAllFilesByFolderId",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseListFile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/files/file": {
      "get": {
        "tags": [
          "Drive Upload Controller"
        ],
        "summary": "Get all files by file id",
        "operationId": "getFileById",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Drive Upload Controller"
        ],
        "summary": "Delete fie by file id",
        "operationId": "deleteFileById",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseString"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/tasks/{task-id}/boards/{board-id}/gantt-bars/{gantt-bar-id}": {
      "delete": {
        "tags": [
          "Task Controller"
        ],
        "summary": "Deleted task by ID with board ID AND gantt bar ID",
        "description": "Deleted task by ID with boards ID and gantt bars ID",
        "operationId": "deleteTaskByIdWithBoardIdAndGanttBarId",
        "parameters": [
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gantt-bar-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/profiles/delete-profile": {
      "delete": {
        "tags": [
          "Profile Controller"
        ],
        "summary": "Delete user profile",
        "description": "Deletes the currently authenticated user's profile. This action cannot be undone.",
        "operationId": "deleteProfile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseObject"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/gantt-charts/{gantt-chart-id}/boards/{board-id}": {
      "delete": {
        "tags": [
          "Gantt Chart Controller"
        ],
        "summary": "Delete gantt chart by ID",
        "description": "Deleted gantt chart by ID with current boards",
        "operationId": "deleteGanttChartById",
        "parameters": [
          {
            "name": "gantt-chart-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/checklists/{checklist-id}/tasks/{task-id}": {
      "delete": {
        "tags": [
          "Checklist Controller"
        ],
        "summary": "Delete checklist by ID and task ID",
        "description": "Deleted checklist by ID with specific tasks ID",
        "operationId": "deleteChecklistByIdAndTaskId",
        "parameters": [
          {
            "name": "checklist-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseChecklist"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/calendars/{calendar-id}/tasks/{task-id}": {
      "delete": {
        "tags": [
          "Calendar Controller"
        ],
        "summary": "Delete note by id from calendar",
        "description": "Delete note by note id  from calendar ",
        "operationId": "deleteCalendarByNoteId",
        "parameters": [
          {
            "name": "calendar-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "task-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseVoid"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/boards/{board-id}/workspaces/{workspace-id}": {
      "delete": {
        "tags": [
          "Board Controller"
        ],
        "summary": "Deleted board by ID AND workspace ID",
        "description": "Deleted a board by board ID",
        "operationId": "deleteBoardByBoardId",
        "parameters": [
          {
            "name": "board-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspace-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/achievements/achievement-id": {
      "delete": {
        "tags": [
          "Achievement Controller"
        ],
        "summary": "Deleted achievement for current users",
        "description": "Deleted achievement for current users",
        "operationId": "deleteAchievement",
        "parameters": [
          {
            "name": "achievement-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "WorkspaceRequest": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ApiResponseWorkspace": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Workspace"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Workspace": {
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "TaskRequest": {
        "required": [
          "boardId",
          "ganttBarId",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "boardId": {
            "type": "string",
            "format": "uuid"
          },
          "ganttBarId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseTask": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Task"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MemberResponseData": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "taskOrder": {
            "type": "integer",
            "format": "int32"
          },
          "stage": {
            "type": "string"
          },
          "boardId": {
            "type": "string",
            "format": "uuid"
          },
          "ganttBarId": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "creator": {
            "$ref": "#/components/schemas/MemberResponseData"
          }
        }
      },
      "ProfileRequest": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "profileImageUrl": {
            "type": "string"
          }
        }
      },
      "ApiResponseAppUserResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/AppUserResponse"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AppUserResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "RATHER_NOT_TO_SAY",
              "MALE",
              "FEMALE"
            ]
          },
          "email": {
            "type": "string"
          },
          "profileImage": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GanttChartRequest": {
        "required": [
          "boardId",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "boardId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseGanttChart": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/GanttChart"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GanttChart": {
        "type": "object",
        "properties": {
          "ganttChartId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "boardId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GanttBarRequest": {
        "required": [
          "face",
          "finishedAt",
          "ganttChartId",
          "startedAt",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "face": {
            "type": "string",
            "enum": [
              "PLANNING",
              "REQUIREMENT_ANALYSIS",
              "DESIGN",
              "IMPLEMENTATION",
              "TESTING_AND_REVIEW",
              "DEPLOYMENT_AND_MAINTENANCE"
            ]
          },
          "ganttChartId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseGanttBar": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/GanttBar"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GanttBar": {
        "type": "object",
        "properties": {
          "ganttBarId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ganttChartId": {
            "type": "string",
            "format": "uuid"
          },
          "face": {
            "type": "string"
          },
          "teamLeader": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberResponseData"
            }
          }
        }
      },
      "FeedbackRequest": {
        "required": [
          "comment",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseFeedback": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Feedback"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Feedback": {
        "type": "object",
        "properties": {
          "feedbackId": {
            "type": "string",
            "format": "uuid"
          },
          "createAt": {
            "type": "string",
            "format": "date-time"
          },
          "comment": {
            "type": "string"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/MemberResponseData"
          }
        }
      },
      "ApiResponseDocument": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Document"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "format": "uuid"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "documentType": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "boardId": {
            "type": "string",
            "format": "uuid"
          },
          "drive_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "is_private": {
            "type": "boolean"
          }
        }
      },
      "ApiResponseString": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CommentRequest": {
        "required": [
          "checklistId",
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "checklistId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseComment": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Comment"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "checklistId": {
            "type": "string",
            "format": "uuid"
          },
          "commentBy": {
            "type": "string",
            "format": "uuid"
          },
          "member": {
            "$ref": "#/components/schemas/MemberResponseData"
          }
        }
      },
      "ChecklistRequest": {
        "required": [
          "finishedAt",
          "startedAt",
          "taskId",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseChecklist": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Checklist"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Checklist": {
        "type": "object",
        "properties": {
          "checklistId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "checklistOrder": {
            "type": "integer",
            "format": "int32"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberResponseData"
            }
          }
        }
      },
      "CalendarRequest": {
        "required": [
          "noted",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "noted": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "tillDate": {
            "type": "string",
            "format": "date-time"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseCalendar": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Calendar"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "calendarId": {
            "type": "string",
            "format": "uuid"
          },
          "noted": {
            "type": "string"
          },
          "notedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tillDate": {
            "type": "string",
            "format": "date-time"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "BoardRequest": {
        "required": [
          "title",
          "workspaceId"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseBoard": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Board"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Board": {
        "type": "object",
        "properties": {
          "boardId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "isFavourite": {
            "type": "boolean"
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AttachmentRequest": {
        "required": [
          "details"
        ],
        "type": "object",
        "properties": {
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ApiResponseAttachment": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Attachment"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "checklistId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AchievementRequest": {
        "required": [
          "details"
        ],
        "type": "object",
        "properties": {
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Achievement": {
        "type": "object",
        "properties": {
          "achievementId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userDetails": {
            "$ref": "#/components/schemas/MemberResponseData"
          }
        }
      },
      "ApiResponseAchievement": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Achievement"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseFileMetadata": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/FileMetadata"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FileMetadata": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string"
          },
          "fileUrl": {
            "type": "string"
          },
          "fileType": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DocumentRequest": {
        "required": [
          "accessToken",
          "boardId",
          "folderName",
          "types"
        ],
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "folderName": {
            "type": "string"
          },
          "types": {
            "type": "string",
            "enum": [
              "DOC",
              "SHEET",
              "SLIDE",
              "FOLDER"
            ]
          },
          "boardId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "InviteRequest": {
        "required": [
          "email",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "roleName": {
            "type": "string",
            "enum": [
              "ROLE_LEADER",
              "ROLE_MEMBER"
            ]
          }
        }
      },
      "AssignedRoleRequest": {
        "required": [
          "assigneeId",
          "boardId",
          "roleName",
          "workspaceId"
        ],
        "type": "object",
        "properties": {
          "boardId": {
            "type": "string",
            "format": "uuid"
          },
          "assigneeId": {
            "type": "string",
            "format": "uuid"
          },
          "roleName": {
            "type": "string",
            "enum": [
              "ROLE_LEADER",
              "ROLE_MEMBER"
            ]
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseObject": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "type": "object"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ResetPasswordRequest": {
        "required": [
          "confirmPassword",
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "type": "string"
          },
          "confirmPassword": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "type": "string"
          }
        }
      },
      "ApiResponseResetPasswordRequest": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/ResetPasswordRequest"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AppUserRequest": {
        "required": [
          "email",
          "gender",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "RATHER_NOT_TO_SAY",
              "MALE",
              "FEMALE"
            ]
          },
          "email": {
            "type": "string"
          },
          "password": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "type": "string"
          },
          "profileImage": {
            "type": "string"
          }
        }
      },
      "ThirdPartyRequest": {
        "required": [
          "email",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string"
          }
        }
      },
      "AuthRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "ApiResponseTokenResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/TokenResponse"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "AuthThirdPartyRequest": {
        "required": [
          "idToken"
        ],
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "ApiResponseRes": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Res"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Res": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ApiResponseFile": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "appProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "capabilities": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "canAcceptOwnership": {
                    "type": "boolean"
                  },
                  "canAddChildren": {
                    "type": "boolean"
                  },
                  "canAddFolderFromAnotherDrive": {
                    "type": "boolean"
                  },
                  "canAddMyDriveParent": {
                    "type": "boolean"
                  },
                  "canChangeCopyRequiresWriterPermission": {
                    "type": "boolean"
                  },
                  "canChangeSecurityUpdateEnabled": {
                    "type": "boolean"
                  },
                  "canChangeViewersCanCopyContent": {
                    "type": "boolean"
                  },
                  "canComment": {
                    "type": "boolean"
                  },
                  "canCopy": {
                    "type": "boolean"
                  },
                  "canDelete": {
                    "type": "boolean"
                  },
                  "canDeleteChildren": {
                    "type": "boolean"
                  },
                  "canDownload": {
                    "type": "boolean"
                  },
                  "canEdit": {
                    "type": "boolean"
                  },
                  "canListChildren": {
                    "type": "boolean"
                  },
                  "canModifyContent": {
                    "type": "boolean"
                  },
                  "canModifyContentRestriction": {
                    "type": "boolean"
                  },
                  "canModifyLabels": {
                    "type": "boolean"
                  },
                  "canMoveChildrenOutOfDrive": {
                    "type": "boolean"
                  },
                  "canMoveChildrenOutOfTeamDrive": {
                    "type": "boolean"
                  },
                  "canMoveChildrenWithinDrive": {
                    "type": "boolean"
                  },
                  "canMoveChildrenWithinTeamDrive": {
                    "type": "boolean"
                  },
                  "canMoveItemIntoTeamDrive": {
                    "type": "boolean"
                  },
                  "canMoveItemOutOfDrive": {
                    "type": "boolean"
                  },
                  "canMoveItemOutOfTeamDrive": {
                    "type": "boolean"
                  },
                  "canMoveItemWithinDrive": {
                    "type": "boolean"
                  },
                  "canMoveItemWithinTeamDrive": {
                    "type": "boolean"
                  },
                  "canMoveTeamDriveItem": {
                    "type": "boolean"
                  },
                  "canReadDrive": {
                    "type": "boolean"
                  },
                  "canReadLabels": {
                    "type": "boolean"
                  },
                  "canReadRevisions": {
                    "type": "boolean"
                  },
                  "canReadTeamDrive": {
                    "type": "boolean"
                  },
                  "canRemoveChildren": {
                    "type": "boolean"
                  },
                  "canRemoveMyDriveParent": {
                    "type": "boolean"
                  },
                  "canRename": {
                    "type": "boolean"
                  },
                  "canShare": {
                    "type": "boolean"
                  },
                  "canTrash": {
                    "type": "boolean"
                  },
                  "canTrashChildren": {
                    "type": "boolean"
                  },
                  "canUntrash": {
                    "type": "boolean"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "contentHints": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "indexableText": {
                    "type": "string"
                  },
                  "thumbnail": {
                    "type": "object",
                    "properties": {
                      "classInfo": {
                        "$ref": "#/components/schemas/ClassInfo"
                      },
                      "image": {
                        "type": "string"
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "factory": {
                        "$ref": "#/components/schemas/JsonFactory"
                      },
                      "unknownKeys": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object"
                        }
                      },
                      "empty": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "contentRestrictions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContentRestriction"
                }
              },
              "copyRequiresWriterPermission": {
                "type": "boolean"
              },
              "createdTime": {
                "$ref": "#/components/schemas/DateTime"
              },
              "description": {
                "type": "string"
              },
              "driveId": {
                "type": "string"
              },
              "explicitlyTrashed": {
                "type": "boolean"
              },
              "exportLinks": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "fileExtension": {
                "type": "string"
              },
              "folderColorRgb": {
                "type": "string"
              },
              "fullFileExtension": {
                "type": "string"
              },
              "hasAugmentedPermissions": {
                "type": "boolean"
              },
              "hasThumbnail": {
                "type": "boolean"
              },
              "headRevisionId": {
                "type": "string"
              },
              "iconLink": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "imageMediaMetadata": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "aperture": {
                    "type": "number",
                    "format": "float"
                  },
                  "cameraMake": {
                    "type": "string"
                  },
                  "cameraModel": {
                    "type": "string"
                  },
                  "colorSpace": {
                    "type": "string"
                  },
                  "exposureBias": {
                    "type": "number",
                    "format": "float"
                  },
                  "exposureMode": {
                    "type": "string"
                  },
                  "exposureTime": {
                    "type": "number",
                    "format": "float"
                  },
                  "flashUsed": {
                    "type": "boolean"
                  },
                  "focalLength": {
                    "type": "number",
                    "format": "float"
                  },
                  "height": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "isoSpeed": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "lens": {
                    "type": "string"
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "classInfo": {
                        "$ref": "#/components/schemas/ClassInfo"
                      },
                      "altitude": {
                        "type": "number",
                        "format": "double"
                      },
                      "latitude": {
                        "type": "number",
                        "format": "double"
                      },
                      "longitude": {
                        "type": "number",
                        "format": "double"
                      },
                      "factory": {
                        "$ref": "#/components/schemas/JsonFactory"
                      },
                      "unknownKeys": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object"
                        }
                      },
                      "empty": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "maxApertureValue": {
                    "type": "number",
                    "format": "float"
                  },
                  "meteringMode": {
                    "type": "string"
                  },
                  "rotation": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "sensor": {
                    "type": "string"
                  },
                  "subjectDistance": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "time": {
                    "type": "string"
                  },
                  "whiteBalance": {
                    "type": "string"
                  },
                  "width": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "isAppAuthorized": {
                "type": "boolean"
              },
              "kind": {
                "type": "string"
              },
              "labelInfo": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Label"
                    }
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "lastModifyingUser": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "displayName": {
                    "type": "string"
                  },
                  "emailAddress": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "me": {
                    "type": "boolean"
                  },
                  "permissionId": {
                    "type": "string"
                  },
                  "photoLink": {
                    "type": "string"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "linkShareMetadata": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "securityUpdateEligible": {
                    "type": "boolean"
                  },
                  "securityUpdateEnabled": {
                    "type": "boolean"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "md5Checksum": {
                "type": "string"
              },
              "mimeType": {
                "type": "string"
              },
              "modifiedByMe": {
                "type": "boolean"
              },
              "modifiedByMeTime": {
                "$ref": "#/components/schemas/DateTime"
              },
              "modifiedTime": {
                "$ref": "#/components/schemas/DateTime"
              },
              "name": {
                "type": "string"
              },
              "originalFilename": {
                "type": "string"
              },
              "ownedByMe": {
                "type": "boolean"
              },
              "owners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "permissionIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "permissions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Permission"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "quotaBytesUsed": {
                "type": "integer",
                "format": "int64"
              },
              "resourceKey": {
                "type": "string"
              },
              "sha1Checksum": {
                "type": "string"
              },
              "sha256Checksum": {
                "type": "string"
              },
              "shared": {
                "type": "boolean"
              },
              "sharedWithMeTime": {
                "$ref": "#/components/schemas/DateTime"
              },
              "sharingUser": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "displayName": {
                    "type": "string"
                  },
                  "emailAddress": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "me": {
                    "type": "boolean"
                  },
                  "permissionId": {
                    "type": "string"
                  },
                  "photoLink": {
                    "type": "string"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "shortcutDetails": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "targetId": {
                    "type": "string"
                  },
                  "targetMimeType": {
                    "type": "string"
                  },
                  "targetResourceKey": {
                    "type": "string"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "size": {
                "type": "integer",
                "format": "int64"
              },
              "spaces": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "starred": {
                "type": "boolean"
              },
              "teamDriveId": {
                "type": "string"
              },
              "thumbnailLink": {
                "type": "string"
              },
              "thumbnailVersion": {
                "type": "integer",
                "format": "int64"
              },
              "trashed": {
                "type": "boolean"
              },
              "trashedTime": {
                "$ref": "#/components/schemas/DateTime"
              },
              "trashingUser": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "displayName": {
                    "type": "string"
                  },
                  "emailAddress": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "me": {
                    "type": "boolean"
                  },
                  "permissionId": {
                    "type": "string"
                  },
                  "photoLink": {
                    "type": "string"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "version": {
                "type": "integer",
                "format": "int64"
              },
              "videoMediaMetadata": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "durationMillis": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "height": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "width": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "viewedByMe": {
                "type": "boolean"
              },
              "viewedByMeTime": {
                "$ref": "#/components/schemas/DateTime"
              },
              "viewersCanCopyContent": {
                "type": "boolean"
              },
              "webContentLink": {
                "type": "string"
              },
              "webViewLink": {
                "type": "string"
              },
              "writersCanShare": {
                "type": "boolean"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ClassInfo": {
        "type": "object",
        "properties": {
          "ignoreCase": {
            "type": "boolean"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enum": {
            "type": "boolean"
          },
          "fieldInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          }
        }
      },
      "ContentRestriction": {
        "type": "object",
        "properties": {
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          },
          "readOnly": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "restrictingUser": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "displayName": {
                "type": "string"
              },
              "emailAddress": {
                "type": "string"
              },
              "kind": {
                "type": "string"
              },
              "me": {
                "type": "boolean"
              },
              "permissionId": {
                "type": "string"
              },
              "photoLink": {
                "type": "string"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "restrictionTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "type": {
            "type": "string"
          },
          "factory": {
            "$ref": "#/components/schemas/JsonFactory"
          },
          "unknownKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "DateTime": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64"
          },
          "dateOnly": {
            "type": "boolean"
          },
          "timeZoneShift": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "field": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "modifiers": {
                "type": "integer",
                "format": "int32"
              },
              "synthetic": {
                "type": "boolean"
              },
              "declaredAnnotations": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "accessible": {
                "type": "boolean",
                "deprecated": true
              },
              "genericType": {
                "type": "object",
                "properties": {
                  "typeName": {
                    "type": "string"
                  }
                }
              },
              "enumConstant": {
                "type": "boolean"
              },
              "annotatedType": {
                "type": "object",
                "properties": {
                  "annotations": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "declaredAnnotations": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "type": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "annotations": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "name": {
            "type": "string"
          },
          "primitive": {
            "type": "boolean"
          },
          "genericType": {
            "type": "object",
            "properties": {
              "typeName": {
                "type": "string"
              }
            }
          },
          "final": {
            "type": "boolean"
          },
          "tersMethodForField": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modifiers": {
                  "type": "integer",
                  "format": "int32"
                },
                "typeParameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "bounds": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "typeName": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "annotatedBounds": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "annotations": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "declaredAnnotations": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "type": {
                              "type": "object",
                              "properties": {
                                "typeName": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "typeName": {
                        "type": "string"
                      },
                      "annotations": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "declaredAnnotations": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "synthetic": {
                  "type": "boolean"
                },
                "declaredAnnotations": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "accessible": {
                  "type": "boolean",
                  "deprecated": true
                },
                "varArgs": {
                  "type": "boolean"
                },
                "parameterCount": {
                  "type": "integer",
                  "format": "int32"
                },
                "parameterAnnotations": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                },
                "genericParameterTypes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string"
                      }
                    }
                  }
                },
                "genericExceptionTypes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "typeName": {
                        "type": "string"
                      }
                    }
                  }
                },
                "default": {
                  "type": "boolean"
                },
                "genericReturnType": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    }
                  }
                },
                "bridge": {
                  "type": "boolean"
                },
                "defaultValue": {
                  "type": "object"
                },
                "annotatedReturnType": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "declaredAnnotations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "type": {
                      "type": "object",
                      "properties": {
                        "typeName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "annotatedParameterTypes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "annotations": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "declaredAnnotations": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "type": {
                        "type": "object",
                        "properties": {
                          "typeName": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "modifiers": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "synthetic": {
                        "type": "boolean"
                      },
                      "annotations": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "declaredAnnotations": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "annotatedType": {
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "declaredAnnotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "type": {
                            "type": "object",
                            "properties": {
                              "typeName": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "parameterizedType": {
                        "type": "object",
                        "properties": {
                          "typeName": {
                            "type": "string"
                          }
                        }
                      },
                      "varArgs": {
                        "type": "boolean"
                      },
                      "namePresent": {
                        "type": "boolean"
                      },
                      "declaringExecutable": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "modifiers": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "typeParameters": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "bounds": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "typeName": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "genericDeclaration": {
                                  "type": "object"
                                },
                                "annotatedBounds": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "annotations": {
                                        "type": "array",
                                        "items": {
                                          "type": "object"
                                        }
                                      },
                                      "declaredAnnotations": {
                                        "type": "array",
                                        "items": {
                                          "type": "object"
                                        }
                                      },
                                      "type": {
                                        "type": "object",
                                        "properties": {
                                          "typeName": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "typeName": {
                                  "type": "string"
                                },
                                "annotations": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  }
                                },
                                "declaredAnnotations": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  }
                                }
                              }
                            }
                          },
                          "synthetic": {
                            "type": "boolean"
                          },
                          "declaredAnnotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "varArgs": {
                            "type": "boolean"
                          },
                          "annotatedParameterTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "annotations": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  }
                                },
                                "declaredAnnotations": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  }
                                },
                                "type": {
                                  "type": "object",
                                  "properties": {
                                    "typeName": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "parameterCount": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "parameterAnnotations": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          },
                          "genericParameterTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "typeName": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "genericExceptionTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "typeName": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "annotatedReturnType": {
                            "type": "object",
                            "properties": {
                              "annotations": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "declaredAnnotations": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "type": {
                                "type": "object",
                                "properties": {
                                  "typeName": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "annotatedReceiverType": {
                            "type": "object",
                            "properties": {
                              "annotations": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "declaredAnnotations": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "type": {
                                "type": "object",
                                "properties": {
                                  "typeName": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "annotatedExceptionTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "annotations": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  }
                                },
                                "declaredAnnotations": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  }
                                },
                                "type": {
                                  "type": "object",
                                  "properties": {
                                    "typeName": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "annotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "accessible": {
                            "type": "boolean",
                            "deprecated": true
                          }
                        }
                      },
                      "implicit": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "annotatedReceiverType": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "declaredAnnotations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "type": {
                      "type": "object",
                      "properties": {
                        "typeName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "annotatedExceptionTypes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "annotations": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "declaredAnnotations": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "type": {
                        "type": "object",
                        "properties": {
                          "typeName": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "annotations": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          },
          "appProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "capabilities": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "canAcceptOwnership": {
                "type": "boolean"
              },
              "canAddChildren": {
                "type": "boolean"
              },
              "canAddFolderFromAnotherDrive": {
                "type": "boolean"
              },
              "canAddMyDriveParent": {
                "type": "boolean"
              },
              "canChangeCopyRequiresWriterPermission": {
                "type": "boolean"
              },
              "canChangeSecurityUpdateEnabled": {
                "type": "boolean"
              },
              "canChangeViewersCanCopyContent": {
                "type": "boolean"
              },
              "canComment": {
                "type": "boolean"
              },
              "canCopy": {
                "type": "boolean"
              },
              "canDelete": {
                "type": "boolean"
              },
              "canDeleteChildren": {
                "type": "boolean"
              },
              "canDownload": {
                "type": "boolean"
              },
              "canEdit": {
                "type": "boolean"
              },
              "canListChildren": {
                "type": "boolean"
              },
              "canModifyContent": {
                "type": "boolean"
              },
              "canModifyContentRestriction": {
                "type": "boolean"
              },
              "canModifyLabels": {
                "type": "boolean"
              },
              "canMoveChildrenOutOfDrive": {
                "type": "boolean"
              },
              "canMoveChildrenOutOfTeamDrive": {
                "type": "boolean"
              },
              "canMoveChildrenWithinDrive": {
                "type": "boolean"
              },
              "canMoveChildrenWithinTeamDrive": {
                "type": "boolean"
              },
              "canMoveItemIntoTeamDrive": {
                "type": "boolean"
              },
              "canMoveItemOutOfDrive": {
                "type": "boolean"
              },
              "canMoveItemOutOfTeamDrive": {
                "type": "boolean"
              },
              "canMoveItemWithinDrive": {
                "type": "boolean"
              },
              "canMoveItemWithinTeamDrive": {
                "type": "boolean"
              },
              "canMoveTeamDriveItem": {
                "type": "boolean"
              },
              "canReadDrive": {
                "type": "boolean"
              },
              "canReadLabels": {
                "type": "boolean"
              },
              "canReadRevisions": {
                "type": "boolean"
              },
              "canReadTeamDrive": {
                "type": "boolean"
              },
              "canRemoveChildren": {
                "type": "boolean"
              },
              "canRemoveMyDriveParent": {
                "type": "boolean"
              },
              "canRename": {
                "type": "boolean"
              },
              "canShare": {
                "type": "boolean"
              },
              "canTrash": {
                "type": "boolean"
              },
              "canTrashChildren": {
                "type": "boolean"
              },
              "canUntrash": {
                "type": "boolean"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "contentHints": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "indexableText": {
                "type": "string"
              },
              "thumbnail": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "image": {
                    "type": "string"
                  },
                  "mimeType": {
                    "type": "string"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "contentRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentRestriction"
            }
          },
          "copyRequiresWriterPermission": {
            "type": "boolean"
          },
          "createdTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "description": {
            "type": "string"
          },
          "driveId": {
            "type": "string"
          },
          "explicitlyTrashed": {
            "type": "boolean"
          },
          "exportLinks": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "fileExtension": {
            "type": "string"
          },
          "folderColorRgb": {
            "type": "string"
          },
          "fullFileExtension": {
            "type": "string"
          },
          "hasAugmentedPermissions": {
            "type": "boolean"
          },
          "hasThumbnail": {
            "type": "boolean"
          },
          "headRevisionId": {
            "type": "string"
          },
          "iconLink": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageMediaMetadata": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "aperture": {
                "type": "number",
                "format": "float"
              },
              "cameraMake": {
                "type": "string"
              },
              "cameraModel": {
                "type": "string"
              },
              "colorSpace": {
                "type": "string"
              },
              "exposureBias": {
                "type": "number",
                "format": "float"
              },
              "exposureMode": {
                "type": "string"
              },
              "exposureTime": {
                "type": "number",
                "format": "float"
              },
              "flashUsed": {
                "type": "boolean"
              },
              "focalLength": {
                "type": "number",
                "format": "float"
              },
              "height": {
                "type": "integer",
                "format": "int32"
              },
              "isoSpeed": {
                "type": "integer",
                "format": "int32"
              },
              "lens": {
                "type": "string"
              },
              "location": {
                "type": "object",
                "properties": {
                  "classInfo": {
                    "$ref": "#/components/schemas/ClassInfo"
                  },
                  "altitude": {
                    "type": "number",
                    "format": "double"
                  },
                  "latitude": {
                    "type": "number",
                    "format": "double"
                  },
                  "longitude": {
                    "type": "number",
                    "format": "double"
                  },
                  "factory": {
                    "$ref": "#/components/schemas/JsonFactory"
                  },
                  "unknownKeys": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "maxApertureValue": {
                "type": "number",
                "format": "float"
              },
              "meteringMode": {
                "type": "string"
              },
              "rotation": {
                "type": "integer",
                "format": "int32"
              },
              "sensor": {
                "type": "string"
              },
              "subjectDistance": {
                "type": "integer",
                "format": "int32"
              },
              "time": {
                "type": "string"
              },
              "whiteBalance": {
                "type": "string"
              },
              "width": {
                "type": "integer",
                "format": "int32"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "isAppAuthorized": {
            "type": "boolean"
          },
          "kind": {
            "type": "string"
          },
          "labelInfo": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "labels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "lastModifyingUser": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "displayName": {
                "type": "string"
              },
              "emailAddress": {
                "type": "string"
              },
              "kind": {
                "type": "string"
              },
              "me": {
                "type": "boolean"
              },
              "permissionId": {
                "type": "string"
              },
              "photoLink": {
                "type": "string"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "linkShareMetadata": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "securityUpdateEligible": {
                "type": "boolean"
              },
              "securityUpdateEnabled": {
                "type": "boolean"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "md5Checksum": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "modifiedByMe": {
            "type": "boolean"
          },
          "modifiedByMeTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "modifiedTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "name": {
            "type": "string"
          },
          "originalFilename": {
            "type": "string"
          },
          "ownedByMe": {
            "type": "boolean"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "quotaBytesUsed": {
            "type": "integer",
            "format": "int64"
          },
          "resourceKey": {
            "type": "string"
          },
          "sha1Checksum": {
            "type": "string"
          },
          "sha256Checksum": {
            "type": "string"
          },
          "shared": {
            "type": "boolean"
          },
          "sharedWithMeTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "sharingUser": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "displayName": {
                "type": "string"
              },
              "emailAddress": {
                "type": "string"
              },
              "kind": {
                "type": "string"
              },
              "me": {
                "type": "boolean"
              },
              "permissionId": {
                "type": "string"
              },
              "photoLink": {
                "type": "string"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "shortcutDetails": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "targetId": {
                "type": "string"
              },
              "targetMimeType": {
                "type": "string"
              },
              "targetResourceKey": {
                "type": "string"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "spaces": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "starred": {
            "type": "boolean"
          },
          "teamDriveId": {
            "type": "string"
          },
          "thumbnailLink": {
            "type": "string"
          },
          "thumbnailVersion": {
            "type": "integer",
            "format": "int64"
          },
          "trashed": {
            "type": "boolean"
          },
          "trashedTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "trashingUser": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "displayName": {
                "type": "string"
              },
              "emailAddress": {
                "type": "string"
              },
              "kind": {
                "type": "string"
              },
              "me": {
                "type": "boolean"
              },
              "permissionId": {
                "type": "string"
              },
              "photoLink": {
                "type": "string"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "videoMediaMetadata": {
            "type": "object",
            "properties": {
              "classInfo": {
                "$ref": "#/components/schemas/ClassInfo"
              },
              "durationMillis": {
                "type": "integer",
                "format": "int64"
              },
              "height": {
                "type": "integer",
                "format": "int32"
              },
              "width": {
                "type": "integer",
                "format": "int32"
              },
              "factory": {
                "$ref": "#/components/schemas/JsonFactory"
              },
              "unknownKeys": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "viewedByMe": {
            "type": "boolean"
          },
          "viewedByMeTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "viewersCanCopyContent": {
            "type": "boolean"
          },
          "webContentLink": {
            "type": "string"
          },
          "webViewLink": {
            "type": "string"
          },
          "writersCanShare": {
            "type": "boolean"
          },
          "factory": {
            "$ref": "#/components/schemas/JsonFactory"
          },
          "unknownKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "JsonFactory": {
        "type": "object"
      },
      "Label": {
        "type": "object",
        "properties": {
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LabelField"
            }
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "revisionId": {
            "type": "string"
          },
          "factory": {
            "$ref": "#/components/schemas/JsonFactory"
          },
          "unknownKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "LabelField": {
        "type": "object",
        "properties": {
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          },
          "dateString": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateTime"
            }
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "selection": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "text": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "valueType": {
            "type": "string"
          },
          "integer": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "factory": {
            "$ref": "#/components/schemas/JsonFactory"
          },
          "unknownKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          },
          "allowFileDiscovery": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "displayName": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "expirationTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "pendingOwner": {
            "type": "boolean"
          },
          "permissionDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionDetails"
            }
          },
          "photoLink": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "teamDrivePermissionDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamDrivePermissionDetails"
            }
          },
          "type": {
            "type": "string"
          },
          "view": {
            "type": "string"
          },
          "factory": {
            "$ref": "#/components/schemas/JsonFactory"
          },
          "unknownKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "PermissionDetails": {
        "type": "object",
        "properties": {
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          },
          "inherited": {
            "type": "boolean"
          },
          "inheritedFrom": {
            "type": "string"
          },
          "permissionType": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "factory": {
            "$ref": "#/components/schemas/JsonFactory"
          },
          "unknownKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "TeamDrivePermissionDetails": {
        "type": "object",
        "properties": {
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          },
          "inherited": {
            "type": "boolean"
          },
          "inheritedFrom": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "teamDrivePermissionType": {
            "type": "string"
          },
          "factory": {
            "$ref": "#/components/schemas/JsonFactory"
          },
          "unknownKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "classInfo": {
            "$ref": "#/components/schemas/ClassInfo"
          },
          "displayName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "me": {
            "type": "boolean"
          },
          "permissionId": {
            "type": "string"
          },
          "photoLink": {
            "type": "string"
          },
          "factory": {
            "$ref": "#/components/schemas/JsonFactory"
          },
          "unknownKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "ApiResponseHashSetWorkspace": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Workspace"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseHashSetTask": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AllMember": {
        "type": "object",
        "properties": {
          "roleName": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AllTasks": {
        "type": "object",
        "properties": {
          "task": {
            "type": "string"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "checklist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistResponse"
            }
          }
        }
      },
      "ApiResponseReport": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Report"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChecklistResponse": {
        "type": "object",
        "properties": {
          "checklistId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comments": {
            "type": "integer",
            "format": "int32"
          },
          "attachments": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string",
            "format": "uuid"
          },
          "creationDate": {
            "type": "string",
            "format": "date"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "boardId": {
            "type": "string",
            "format": "uuid"
          },
          "allMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllMember"
            }
          },
          "boardName": {
            "type": "string"
          },
          "allTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllTasks"
            }
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "isRead": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "senderId": {
            "type": "string",
            "format": "uuid"
          },
          "receiverId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApiResponseHashSetGanttBar": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GanttBar"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseSetFeedback": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseListDocument": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseSetComment": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseHashSetChecklist": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Checklist"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseHashSetCalendar": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calendar"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseHashSetBoard": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Board"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseHashSetMemberResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberResponse"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MemberResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "profileImage": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiResponseListFile": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeleteApiResponseWorkspace": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseVoid": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "type": "object"
          },
          "pagination": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "in": "header",
        "scheme": "bearer"
      }
    }
  }
}